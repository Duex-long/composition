"use strict";(self.webpackChunkzcomposition=self.webpackChunkzcomposition||[]).push([[304],{9007:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4deb2ad7",path:"/composition/Effect/useEffect/",title:"useEffect 无副作用的执行某个函数",lang:"en-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码演示",slug:"代码演示",children:[{level:3,title:"示例代码",slug:"示例代码",children:[]}]},{level:2,title:"Interface",slug:"interface",children:[]},{level:2,title:"Option",slug:"option",children:[]}],filePathRelative:"composition/Effect/useEffect/README.md",git:{updatedTime:1632830925e3,contributors:[{name:"curryPaste",email:"2771885247@qq.com",commits:1}]}}},8238:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var t=a(6252),e=a(3577),p=a(2262),o=a(3560),c=a(2060);const l=(0,t._)("h1",{id:"useeffect-无副作用的执行某个函数",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#useeffect-无副作用的执行某个函数","aria-hidden":"true"},"#"),(0,t.Uk)(" useEffect 无副作用的执行某个函数")],-1),u=(0,t.Uk)("参考了React的"),i={href:"https://zh-hans.reactjs.org/docs/hooks-effect.html",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("useEffect"),k=(0,t.Uk)("方法"),d=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>原版React的useEffect有两个关键点</p><ul><li>可以选择性的执行一个无副作用的函数 <ul><li>如果不 <code>return</code> 则表示不需要清除副作用</li></ul></li><li>调用函数的机制 <ul><li>初始调用</li><li>当依赖项的值发生了变化时，也去触发对应的函数</li></ul></li></ul><blockquote><p>用vue实现该钩子，初版先能够实现第一个关键点: 能够无副作用的执行一个函数</p></blockquote></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2>',2),b=(0,t.uE)('<h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 需要处理副效应</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is interval, when Unmounted I`m destroy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 不需要处理副效应</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ii <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I`m interavl, but always&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UseEffectVoid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 不需要处理副效应</span>\n<span class="token keyword">type</span> <span class="token class-name">UseEffectFunVoid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 需要处理副效应</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>method</td><td>需要执行的函数(如果需要清除副效应，则在要执行的函数中return一个函数，并在函数中清除副效应)</td><td>UseEffectVoid / UseEffectFunVoid</td><td>-</td></tr></tbody></table>',6),h=(0,t.aZ)({setup(n){const s=(0,p.qj)({need:1,dont:1});return c.isClient&&((0,o.d4)((()=>{const n=setInterval((()=>{console.log("this is interval, when Unmounted I`m destroy"),s.need+=1}),2e3);return()=>{clearInterval(n)}})),(0,o.d4)((()=>{setInterval((()=>{console.log("I`m interavl, but always"),s.dont+=1}),2e3)}))),(n,a)=>{const o=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[l,(0,t._)("p",null,[u,(0,t._)("a",i,[r,(0,t.Wm)(o)]),k]),d,(0,t._)("div",null,[(0,t._)("div",null,[(0,t._)("div",null,"show: "+(0,e.zw)((0,p.SU)(s).need),1),(0,t._)("div",null,"show: "+(0,e.zw)((0,p.SU)(s).dont),1)])]),b],64)}}})},2060:(n,s,a)=>{a.d(s,{isClient:()=>t});const t="undefined"!=typeof window,{toString:e}=Object.prototype}}]);